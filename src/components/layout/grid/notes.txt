const svgDataUri = `data:image/svg+xml,${encodedSVG}`;
const img = new Image();
img.onload = () => console.log('SVG valid and loaded');
img.onerror = () => console.log('SVG failed to load');
img.src = svgDataUri;

--------------
let validImg = false;

function MyComponent() {
    useEffect(() => {
        const img = new Image();
        img.src = validImageUrl;
        img.onload = () => { validImg = true; };
        img.onerror = () => { validImg = false; };
    }, []);

    return <div>{validImg ? 'Valid' : 'Invalid'}</div>;
}
------------------
useEffect(() => {
    const validateImage = (url, callback) => {
        const img = new Image();
        img.onload = () => callback(true);
        img.onerror = () => callback(false);
        img.src = url;
    };

    validateImage(`data:image/svg+xml,${decodeInput}`, (isValid) => {
        // Handle validation result
    });
}, [encodeInput, decodeInput]);
----------------------------
const validateImage = (url) => {
    return new Promise((resolve) => {
        const img = new Image();
        img.onload = () => resolve(true);
        img.onerror = () => resolve(false);
        img.src = url;
    });
};
------------------------------
const validateImage = (url) => {
    return new Promise((resolve) => {
        const img = new Image();
        img.onload = () => resolve(true);
        img.onerror = () => resolve(false);
        img.src = url;
    });
};

function MyComponent() {
    useEffect(() => {
        // Can use validateImage here
    }, []);

    // Can also use validateImage in template/render
    const handleImageValidation = async () => {
        const isValid = await validateImage(imageUrl);
        // Use validation result
    };

    return <div>{/* Component template */}</div>;
}